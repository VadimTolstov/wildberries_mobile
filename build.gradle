plugins {
    id "java-library"
    id("io.qameta.allure") version "2.11.2"
    id "io.freefair.lombok" version "6.0.0-m2"
}
def allureVersion = "2.21.0",
    slf4jVersion = "2.0.7",
    restAssuredVersion = "5.3.0"

group = 'vadim_tolsotv'
version = '1.0-SNAPSHOT'

allure {
    report { //секция репорта
        version(allureVersion)
    }
    adapter { //отвечает за появление папочки build/allure-results
        aspectjWeaver.set(true)//Обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set(allureVersion)//версия интеграции фреймворка и Allure
            }
        }
    }
}

repositories {
    mavenCentral()

}


compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation "org.jetbrains:annotations:20.1.0"
    testImplementation(
            "com.codeborne:selenide:6.13.0",
            "org.assertj:assertj-core:3.24.2",
            "org.junit.jupiter:junit-jupiter:5.9.2",
            "io.appium:java-client:8.3.0",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "com.github.javafaker:javafaker:1.0.2",
            "com.codeborne:pdf-test:1.5.0",
            "com.codeborne:xls-test:1.4.3",
            "com.opencsv:opencsv:5.7.1",
            "com.google.code.gson:gson:2.10.1",
            "com.fasterxml.jackson.core:jackson-databind:2.13.1",
            "com.fasterxml.jackson.core:jackson-core:2.13.1",
            "org.aeonbits.owner:owner:1.0.12",
            "org.aspectj:aspectjweaver:1.9.19",
            "org.aeonbits.owner:owner:1.0.12",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-path:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "commons-io:commons-io:2.11.0"

    )
    // testImplementation 'org.testng:testng:7.1.0'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform{
        if (System.getProperty("tag") != null && !System.getProperty("tag").isEmpty()) {
            includeTags System.getProperty("tag")
        }
    }

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform()
//    //Язык, на котором запуститься сайт
//    // systemProperty "chromeoptions.prefs","int.accept_languages=en"
    systemProperties(System.getProperties())
}

task api_test(type: Test) {
    useJUnitPlatform {
        includeTags("APITEST")
    }
}

task android(type: Test) {
    useJUnitPlatform {
        includeTags("ANDROID")
    }
}